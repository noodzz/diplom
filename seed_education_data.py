from database.operations import (
    create_project_template, add_task_template, add_task_template_dependency,
    add_project_employee, init_db, create_new_project, Session
)
from database.models import Employee, DayOff, Project


def seed_education_data():
    """
    Создает базовые данные на основе дипломной работы.
    Данные взяты из главы 1.
    """
    print("Инициализация базы данных образовательных курсов...")
    init_db()

    # Создаем базовый проект для сотрудников
    session = Session()
    base_project = session.query(Project).filter(Project.name == "Базовый проект").first()
    if not base_project:
        base_project_id = create_new_project("Базовый проект")
    else:
        base_project_id = base_project.id

    print("\nСоздание сотрудников технического отдела...")

    # Настройка
    create_employees(base_project_id, [
        {
            "name": "Иванов Сергей Петрович",
            "position": "Руководитель сектора настройки",
            "days_off": ["Суббота", "Воскресенье"],
            "email": "ivanov.sp@example.com"
        },
        {
            "name": "Смирнова Елена Андреевна",
            "position": "Старший технический специалист",
            "days_off": ["Суббота", "Воскресенье"],
            "email": "smirnova.ea@example.com"
        },
        {
            "name": "Силезнева Анастасия Юрьевна",
            "position": "Старший технический специалист",
            "days_off": ["Суббота", "Воскресенье"],
            "email": "silezneva.anastasia@gmail.com"

        },
        {
            "name": "Козлов Дмитрий Сергеевич",
            "position": "Технический специалист",
            "days_off": ["Понедельник", "Воскресенье"],
            "email": "kozlov.ds@example.com"
        },
        {
            "name": "Николаева Александра Михайловна",
            "position": "Технический специалист",
            "days_off": ["Среда", "Пятница"],
            "email": "nikolaeva.am@example.com"
        },
    ])

    # Контент
    create_employees(base_project_id, [
        {
            "name": "Морозова Ирина Владимировна",
            "position": "Руководитель контента",
            "days_off": ["Суббота", "Воскресенье"],
            "email": "morozova.iv@example.com"
        },
        {
            "name": "Соколов Алексей Павлович",
            "position": "Старший специалист",
            "days_off": ["Вторник", "Пятница"],
            "email": "sokolov.ap@example.com"
        },
        {
            "name": "Васильева Ольга Игоревна",
            "position": "Старший специалист",
            "days_off": ["Пятница"],
            "email": "vasileva.oi@example.com"
        },
        {
            "name": "Кузнецов Михаил Александрович",
            "position": "Старший специалист",
            "days_off": ["Суббота"],
            "email": "kuznetsov.ma@example.com"
        },
        {
            "name": "Силезнева Анастасия Юрьевна",
            "position": "Младший специалист",
            "days_off": ["Суббота"],
            "email": "silezneva.anastasia@gmail.com"
        },
        {
            "name": "Медведев Игорь Сергеевич",
            "position": "Младший специалист",
            "days_off": ["Суббота"],
            "email": "medvedev.is@example.com"
        },
        {
            "name": "Алексеева Татьяна Владимировна",
            "position": "Младший специалист",
            "days_off": ["Суббота"],
            "email": "alekseeva.tv@example.com"
        },
        {
            "name": "Павлов Максим Андреевич",
            "position": "Младший специалист",
            "days_off": ["Четверг"],
            "email": "pavlov.ma@example.com"
        },
        {
            "name": "Егорова Светлана Николаевна",
            "position": "Младший специалист",
            "days_off": ["Среда"],
            "email": "egorova.sn@example.com"
        },
        {
            "name": "Орлов Владимир Петрович",
            "position": "Младший специалист",
            "days_off": ["Воскресенье"],
            "email": "orlov.vp@example.com"
        },
        {
            "name": "Куликова Екатерина Ивановна",
            "position": "Младший специалист",
            "days_off": ["Понедельник"],
            "email": "kulikova.ei@example.com"
        },
    ])

    # Проектные менеджеры
    create_employees(base_project_id, [
        {
            "name": "Виноградова Юлия Алексеевна",
            "position": "Проектный менеджер",
            "days_off": ["Вторник", "Суббота"],
            "email": "vinogradova.ya@example.com"
        },
    ])

    # Создаем шаблоны проектов на основе данных из главы 1.2
    print("\nСоздание шаблона проекта 'Образовательный курс ОГЭ/ЕГЭ'...")
    template_id = create_project_template(
        name="Образовательный курс ОГЭ/ЕГЭ",
        description="Шаблон для создания образовательного курса подготовки к ОГЭ/ЕГЭ"
    )

    # Добавляем задачи на основе таблицы 1 из диплома
    tasks = [
        {"name": "Расчёт стоимостей", "duration": 3, "position": "Проектный менеджер", "order": 1},
        {"name": "Создание тарифов обучения", "duration": 1, "position": "Технический специалист", "order": 2},
        {"name": "Создание продуктовых типов и продуктов", "duration": 2, "position": "Старший технический специалист",
         "order": 3},
        {"name": "Создание потоков обучения", "duration": 2, "position": "Старший технический специалист", "order": 4},
        {"name": "Создание тарифов для внешнего сайта", "duration": 1, "position": "Старший технический специалист",
         "order": 5},
        {"name": "Создание продуктовых страниц для внешнего сайта", "duration": 1,
         "position": "Старший технический специалист", "order": 6},
        {"name": "Создание продуктовых типов для внешнего сайта", "duration": 1,
         "position": "Старший технический специалист", "order": 7},
        {"name": "Сборка и загрузка образовательных программ", "duration": 2, "position": "Технический специалист",
         "order": 8},
        {"name": "Создание настроек групп учеников", "duration": 1, "position": "Руководитель сектора настройки",
         "order": 9},
        {"name": "Создание пакетных предложений", "duration": 1, "position": "Старший технический специалист",
         "order": 10},
        {"name": "Создание комплектов курсов", "duration": 1, "position": "Старший технический специалист",
         "order": 11},
        {"name": "Создание связей с подарочными курсами", "duration": 1, "position": "Технический специалист",
         "order": 12},
        {"name": "Настройка порядка карточек в каталоге", "duration": 1, "position": "Технический специалист",
         "order": 13},
        {"name": "Настройка актуального месяца покупки", "duration": 1, "position": "Старший технический специалист",
         "order": 14},
        {"name": "Импорт академических часов", "duration": 2, "position": "Технический специалист", "order": 15},
        {"name": "Постконтроль созданных объектов", "duration": 2, "position": "Руководитель сектора настройки",
         "order": 16},
        {"name": "Создание модулей обучения", "duration": 2, "position": "Руководитель контента", "order": 17},
        {"name": "Создание уровней обучения", "duration": 2, "position": "Руководитель контента", "order": 18},
        {"name": "Настройка связей между потоками и модулями", "duration": 1, "position": "Старший специалист",
         "order": 19},
        {"name": "Настройка связей между потоками и уровнями", "duration": 1, "position": "Старший специалист",
         "order": 20},
        {"name": "Сборка сводной таблицы для создания занятий", "duration": 7, "position": "Старший специалист",
         "order": 21},
        {"name": "Создание занятий и домашних заданий", "duration": 3, "position": "Руководитель контента",
         "order": 22},
        {"name": "Создание связей между уроками и модулями", "duration": 1, "position": "Старший специалист",
         "order": 23},
        {"name": "Создание связей продукт-урок-уровень", "duration": 2, "position": "Старший специалист", "order": 24},
        {"name": "Наполнение контентом занятий и домашних заданий", "duration": 3, "position": "Младший специалист",
         "order": 25},
        {"name": "Постконтроль созданных уроков", "duration": 7, "position": "Младший специалист", "order": 26},
    ]

    # Создаем задачи
    task_ids = {}
    for task in tasks:
        task_id = add_task_template(
            template_id=template_id,
            name=task["name"],
            duration=task["duration"],
            position=task["position"],
            order=task["order"]
        )
        task_ids[task["name"]] = task_id

    # Добавляем зависимости между задачами на основе данных из таблицы 1
    dependencies = [
        ("Создание тарифов обучения", "Расчёт стоимостей"),
        ("Создание продуктовых типов и продуктов", "Создание тарифов обучения"),
        ("Создание потоков обучения", "Создание продуктовых типов и продуктов"),
        ("Создание тарифов для внешнего сайта", "Создание тарифов обучения"),
        ("Создание продуктовых страниц для внешнего сайта", "Создание продуктовых типов и продуктов"),
        ("Создание продуктовых типов для внешнего сайта", "Создание продуктовых типов и продуктов"),
        ("Сборка и загрузка образовательных программ", "Создание продуктовых типов для внешнего сайта"),
        ("Создание настроек групп учеников", "Создание продуктовых типов и продуктов"),
        ("Создание пакетных предложений", "Создание потоков обучения"),
        ("Создание комплектов курсов", "Создание пакетных предложений"),
        ("Создание связей с подарочными курсами", "Создание пакетных предложений"),
        ("Настройка порядка карточек в каталоге", "Создание продуктовых типов и продуктов"),
        ("Настройка актуального месяца покупки", "Создание потоков обучения"),
        ("Импорт академических часов", "Создание потоков обучения"),
        ("Постконтроль созданных объектов", "Создание тарифов для внешнего сайта"),
        ("Постконтроль созданных объектов", "Создание продуктовых страниц для внешнего сайта"),
        ("Постконтроль созданных объектов", "Сборка и загрузка образовательных программ"),
        ("Постконтроль созданных объектов", "Создание настроек групп учеников"),
        ("Постконтроль созданных объектов", "Создание комплектов курсов"),
        ("Постконтроль созданных объектов", "Создание связей с подарочными курсами"),
        ("Постконтроль созданных объектов", "Настройка порядка карточек в каталоге"),
        ("Постконтроль созданных объектов", "Настройка актуального месяца покупки"),
        ("Постконтроль созданных объектов", "Импорт академических часов"),
        ("Настройка связей между потоками и модулями", "Создание потоков обучения"),
        ("Настройка связей между потоками и модулями", "Создание модулей обучения"),
        ("Настройка связей между потоками и уровнями", "Создание потоков обучения"),
        ("Настройка связей между потоками и уровнями", "Создание уровней обучения"),
        ("Сборка сводной таблицы для создания занятий", "Настройка связей между потоками и модулями"),
        ("Сборка сводной таблицы для создания занятий", "Настройка связей между потоками и уровнями"),
        ("Создание занятий и домашних заданий", "Сборка сводной таблицы для создания занятий"),
        ("Создание связей между уроками и модулями", "Создание занятий и домашних заданий"),
        ("Создание связей продукт-урок-уровень", "Создание занятий и домашних заданий"),
        ("Наполнение контентом занятий и домашних заданий", "Создание связей продукт-урок-уровень"),
        ("Постконтроль созданных уроков", "Создание связей продукт-урок-уровень"),
    ]

    # Добавляем зависимости
    for task_name, predecessor_name in dependencies:
        add_task_template_dependency(task_ids[task_name], task_ids[predecessor_name])

    # Создаем шаблон для немного другого типа проекта
    print("\nСоздание шаблона проекта 'Учебный онлайн-курс (базовый)'...")
    template_id_basic = create_project_template(
        name="Учебный онлайн-курс (базовый)",
        description="Упрощенный шаблон для создания базового учебного курса"
    )

    # Создаем базовый набор задач для этого шаблона
    basic_tasks = [
        {"name": "Расчёт стоимости курса", "duration": 2, "position": "Проектный менеджер", "order": 1},
        {"name": "Создание тарифов", "duration": 1, "position": "Технический специалист", "order": 2},
        {"name": "Создание продуктов", "duration": 2, "position": "Старший технический специалист", "order": 3},
        {"name": "Создание потоков", "duration": 1, "position": "Старший технический специалист", "order": 4},
        {"name": "Создание модулей", "duration": 2, "position": "Руководитель контента", "order": 5},
        {"name": "Создание занятий", "duration": 3, "position": "Старший специалист", "order": 6},
        {"name": "Наполнение контентом", "duration": 5, "position": "Младший специалист", "order": 7},
        {"name": "Проверка созданных объектов", "duration": 2, "position": "Руководитель сектора настройки",
         "order": 8},
    ]

    # Создаем задачи для базового шаблона
    basic_task_ids = {}
    for task in basic_tasks:
        task_id = add_task_template(
            template_id=template_id_basic,
            name=task["name"],
            duration=task["duration"],
            position=task["position"],
            order=task["order"]
        )
        basic_task_ids[task["name"]] = task_id

    # Добавляем зависимости для базового шаблона
    basic_dependencies = [
        ("Создание тарифов", "Расчёт стоимости курса"),
        ("Создание продуктов", "Создание тарифов"),
        ("Создание потоков", "Создание продуктов"),
        ("Создание занятий", "Создание потоков"),
        ("Создание занятий", "Создание модулей"),
        ("Наполнение контентом", "Создание занятий"),
        ("Проверка созданных объектов", "Наполнение контентом"),
    ]

    # Добавляем зависимости для базового шаблона
    for task_name, predecessor_name in basic_dependencies:
        add_task_template_dependency(basic_task_ids[task_name], basic_task_ids[predecessor_name])

    print("\nДанные успешно добавлены в базу данных.")
    print(f"Создано 2 шаблона проектов и {len(tasks) + len(basic_tasks)} задач.")
    print(f"Добавлено {len(dependencies) + len(basic_dependencies)} зависимостей между задачами.")


def create_employees(project_id, employees_data):
    """
    Создает сотрудников в базе данных.

    Args:
        project_id: ID проекта
        employees_data: Список словарей с данными о сотрудниках
    """
    for emp_data in employees_data:
        add_project_employee(
            project_id=project_id,
            name=emp_data["name"],
            position=emp_data["position"],
            days_off=emp_data["days_off"],
            email=emp_data.get("email")
        )


if __name__ == "__main__":
    seed_education_data()